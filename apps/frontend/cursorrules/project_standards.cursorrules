# Project Technical Standards - Web Application

You are an expert in modern full-stack web development using AI-driven methodologies (Cursor, Composer, v0) with a technology stack that includes TypeScript, React, Next.js, Node.js, and Tailwind CSS.

---

## 1. General Code Style and Structure

- **Code Style:**
  - Write concise, technical, and maintainable TypeScript code with clear examples.
  - Use functional, declarative programming patterns; avoid classes.
  - Favor iterative approaches and modularization over code duplication.
  - Use descriptive variable names that clearly indicate their purpose (e.g., `isLoading`, `hasError`).

- **File & Directory Structure:**
  - Organize files by purpose: exported components/pages, subcomponents, helpers, static content, and types.
  - Use **named exports** for functions and components.
  - Follow lowercase-with-dashes for directory names (e.g., `components/auth-wizard`).
  - Keep consistent structure across frontend and backend (e.g., separate folders for `components/`, `hooks/` or `routes/`, `models/`).

- **Formatting:**
  - Use Prettier (or an equivalent formatter) for consistent code formatting.
  - Use concise JSX syntax with minimal unnecessary braces in conditionals.

- **Versioning & Documentation:**
  - Maintain versioned requirements and design documents (e.g., basic-requirements.md, detailed-requirements.md).
  - Document any updates to the cursorrules along with version tags to ensure that AI-driven code generation remains in sync with evolving guidelines.

---

## 2. TypeScript Best Practices

- Use TypeScript for all code in strict mode.
- **Type Definitions:**
  - Prefer interfaces over types for defining object shapes.
  - Avoid using enums; prefer literal types or maps.
  - Do not use `any` or `unknown` unless absolutely necessary.
- **Code Examples:**
  - Always annotate function props with interfaces.
  - Write pure functions using the `function` keyword.
- **Error Handling:**
  - Use Zod for runtime validation and type inference wherever applicable.

---

## 3. Frontend – React & Next.js

- **Component Structure:**
  - Use functional components exclusively.
  - Organize UI code with clear separation: main component, subcomponents, hooks, helpers, and type definitions.
- **React & Next.js Specifics:**
  - Use Next.js for server-side capabilities and static site generation.
  - Follow Next.js app router and file-based routing conventions.
  - Use Next.js API routes for backend functionality where appropriate.
- **Navigation:**
  - Use Next.js Link component for client-side navigation.
  - Implement appropriate routing patterns following Next.js best practices.
- **State Management & Data Fetching:**
  - Prefer React Context paired with `useReducer` for global state management.
  - Use React Query or SWR for data fetching, caching, and synchronization.
  - Leverage Next.js data fetching methods (getServerSideProps, getStaticProps) as needed.
- **UI & Styling:**
  - For styling, use Tailwind CSS consistently across the application.
  - Ensure high accessibility with proper ARIA roles and semantic HTML.
  - Optimize for performance using best practices from Next.js and React.

---

## 4. UI Styling with Tailwind CSS

- Use Tailwind's utility-first approach for rapid styling.
- Apply a mobile-first approach with responsive design principles.
- Follow consistent patterns for commonly used UI components.
- Create custom utility classes in the Tailwind config when needed.
- Enforce naming conventions for any custom CSS classes to ensure consistency.
- Include dark mode support and responsiveness as a standard requirement.
- Use Tailwind's configuration options for theming (colors, spacing, etc.).

---

## 5. Backend – Next.js API Routes & Node.js

- **Backend Frameworks:**
  - For web APIs, use Next.js API routes following its conventions.
  - For standalone Node.js APIs, use Express with modular routing and controllers.
- **Data Management:**
  - Use appropriate database technologies as specified in project requirements.
  - Validate incoming data using Zod schemas.
  - Handle API security by enforcing HTTPS, proper authentication, and input sanitization.
- **Environment Management:**
  - Manage environment variables securely via Next.js environment variables or dotenv.
  - Keep sensitive information out of client-side code.

---

## 6. Additional Conventions & Best Practices

- **Error Handling:**
  - Always handle errors at the beginning of functions using early returns to reduce nesting.
  - Implement global error boundaries to catch unexpected errors.
  - Use appropriate error logging and monitoring tools.
  
- **Performance Optimization:**
  - Minimize unnecessary re-renders by memoizing components with `React.memo`, and hooks like `useCallback` and `useMemo`.
  - Implement code splitting and lazy loading for non-critical components (React's Suspense and dynamic imports).
  - Use Next.js Image component for optimized image loading.
  - Implement proper caching strategies for API responses.

- **Internationalization (i18n):**
  - Use next-i18next or similar libraries for multi-language support if required.
  
- **Testing:**
  - Write unit tests with Jest and React Testing Library.
  - Use Cypress for E2E testing.
  - Use snapshot testing to ensure UI consistency.

- **Security:**
  - Sanitize all user inputs to prevent XSS or injection attacks.
  - Implement appropriate CSRF protection.
  - Follow Next.js security best practices.

---

## 7. Integration with AI-Driven Development Workflow

- **Composer Integration:**
  - When creating or updating requirements/feature prompts, reference this cursorrule to ensure that AI-generated code adheres to these conventions.
  - If discrepancies are found between generated code and these guidelines, update both your requirements documents and this cursorrule accordingly.
  
- **Version Control & Review:**
  - Always review AI-generated code manually to ensure compliance.
  - Use automated linting and CI/CD pipelines to enforce these rules continuously.
  - Maintain a revision history for changes in rules to trace how AI guidance has evolved.

---

*This cursorrule is designed to enforce a consistent development style and ensure that AI-driven code generation (via Cursor/Composer) produces high-quality, maintainable, and secure code across both frontend and backend for this web application project.*
